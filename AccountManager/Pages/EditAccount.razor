@page "/accounts/edit/{id:int}"
@using AccountManager.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Nav

<div class="container my-4">
    <div class="card">
        <div class="card-header bg-warning text-dark">
            <h3 class="card-title mb-0">Edit Account</h3>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            @if (account == null || subscriptions == null || statuses == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <EditForm Model="@account" OnValidSubmit="@SaveChanges">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Company Name</label>
                        <InputText class="form-control" @bind-Value="account.CompanyName" />
                        <ValidationMessage For="@(() => account.CompanyName)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <InputText class="form-control" @bind-Value="account.Country" />
                    </div>
                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="account.IsActive" />
                        <label class="form-check-label ms-2">Active?</label>
                    </div>

                    <!-- Subscription dropdown -->
                    <div class="mb-3">
                        <label class="form-label">Subscription Plan</label>
                        <select class="form-select" @bind="account.AccountSubscription.SubscriptionId">
                            @foreach (var s in subscriptions)
                            {
                                <option value="@s.SubscriptionId">@s.Description</option>
                            }
                        </select>
                    </div>

                    <!-- Subscription Status dropdown -->
                    <div class="mb-3">
                        <label class="form-label">Subscription Status</label>
                        <select class="form-select" @bind="account.AccountSubscription.SubscriptionStatusId">
                            @foreach (var st in statuses)
                            {
                                <option value="@st.SubscriptionStatusId">@st.Description</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input"
                                       @bind-Value="account.AccountSubscription.Is2FaAllowed" />
                        <label class="form-check-label ms-2">Allow 2FA?</label>
                    </div>
                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input"
                                       @bind-Value="account.AccountSubscription.IsIpFilterAllowed" />
                        <label class="form-check-label ms-2">Allow IP Filtering?</label>
                    </div>
                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input"
                                       @bind-Value="account.AccountSubscription.IsSessionTimeoutAllowed" />
                        <label class="form-check-label ms-2">Allow Session Timeout?</label>
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="account.Is2FAEnabled" />
                        <label class="form-check-label ms-2">2FA Enabled for this account?</label>
                    </div>
                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="account.IsIPFilterEnabled" />
                        <label class="form-check-label ms-2">IP Filter Enabled for this account?</label>
                    </div>
                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="account.IsSessionTimeoutEnabled" />
                        <label class="form-check-label ms-2">Session Timeout Enabled?</label>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Session Timeout (minutes)</label>
                        <InputNumber class="form-control" @bind-Value="account.SessionTimeOut" />
                    </div>

                    <div class="text-end">
                        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        <button class="btn btn-primary ms-2" type="submit">Save</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    private Account? account;
    private List<Subscription>? subscriptions;
    private List<AccountSubscriptionStatus>? statuses;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load account
            account = await Http.GetFromJsonAsync<Account>($"api/Accounts/{id}");
            // Load all subscriptions
            subscriptions = await Http.GetFromJsonAsync<List<Subscription>>("api/Subscription");
            // Load subscription statuses
            statuses = await Http.GetFromJsonAsync<List<AccountSubscriptionStatus>>("api/AccountSubscriptionStatus");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SaveChanges()
    {
        if (account == null) return;
        try
        {
            errorMessage = "";
            var resp = await Http.PutAsJsonAsync($"api/Accounts/{id}", account);
            if (resp.IsSuccessStatusCode)
                Nav.NavigateTo("/accounts");
            else
                errorMessage = await resp.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/accounts");
    }
}
