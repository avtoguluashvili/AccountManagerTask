@page "/subscriptions/create"
@using AccountManager.Domain.Entities
@inject HttpClient Http
@inject NavigationManager Nav

<div class="container my-4">
    <div class="card">
        <div class="card-header bg-success text-white">
            <h3 class="mb-0">Create Subscription</h3>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }

            <EditForm Model="@_model" OnValidSubmit="@CreateSubscription">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputText class="form-control" @bind-Value="_model.Description"/>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="_model.IsDefault"/>
                    <label class="form-check-label ms-2">Is Default?</label>
                </div>

                <div class="text-end">
                    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button class="btn btn-primary ms-2" type="submit">Create</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private readonly Subscription _model = new();
    private string _errorMessage = "";

    private async Task CreateSubscription()
    {
        try
        {
            var resp = await Http.PostAsJsonAsync("api/Subscription", _model);
            if (resp.IsSuccessStatusCode)
                Nav.NavigateTo("/subscriptions");
            else
                _errorMessage = await resp.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/subscriptions");
    }

}